classDiagram

    class PKB {
        + PopulateDataStructures(Deliverable: deliverable)
    }

    class SourceProcessor {
        + PKB*: ProcessSourceFile(string: file_name)
    }

    class Parser {
        + Deliverable* deliverable_

        + Parse(string: file_name)
        + Deliverable*: GetDeliverables()
    }

    class DesignExtractor {
        + Deliverable* deliverable_

        + ExtractDesignAbstractions()
    }

    class PSubsystem {
        - Deliverable*: deliverable_
        - SyntaxValidator: syntax_validator_
        - EntityFactory: entity_factory_
        - stack<Container*>: parent_stack_
        - stack<Statement*>: follow_stack_
        - bool: valid_state

        + InitDataStructures()
        + ProcessStatement(string: statement)
        + Deliverable*: GetDeliverables()
    }

    class Tokenizer {
        + vector<Token>: CreateTokens(string: statement_string)
    }

    class SyntaxValidator {
        + bool: ValidateSyntax(vector<Token>: statement_tokens)
    }

    class EntityFactory {
        - std::list<Procedure*>*: proc_list_
        - std::list<Variable*>*: var_list_
        - std::list<ConstantValue*>*: const_list_

        + Entity*: CreateEntities(vector<Token>: tokens)
    }

    SourceProcessor --> Parser
    SourceProcessor --> DesignExtractor
    SourceProcessor --> PKB

    Parser --> PSubsystem

    PSubsystem --> Tokenizer
    PSubsystem --> SyntaxValidator
    PSubsystem o--> EntityFactory
