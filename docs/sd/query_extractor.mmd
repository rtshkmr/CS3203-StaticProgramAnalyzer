sequenceDiagram
    autonumber
    participant QueryExtractor
    participant QueryParser
    participant QueryTokenizer
    participant QuerySemanticValidator
    participant QueryOptimizer

    %% This sd is for per query (PQL statement) basis.
    QueryExtractor->>QueryTokenizer: init()
    QueryTokenizer-->>QueryExtractor: QueryTokenizer tokenizer
    QueryExtractor->>QueryParser: init(vector<Clause*> clauses, <br>VECTOR_OF_PAIRS<Synonym*, Attribute> target_syn_attributes, <br>map<string, Synonym*> target_synonyms, tokenizer)
    QueryParser-->>QueryExtractor: QueryParser parser
    QueryExtractor->>QueryParser: parser.Parse()
    Note right of QueryParser: Calls multiple handlers according to <br> grammar rules (recursive descent)
    loop is expecting tokens based on grammar rules
        QueryParser->>QueryTokenizer: GetNextToken()
        QueryTokenizer-->>QueryParser: Token t
        Note right of QueryParser: First layer of validations
        opt is relRef
            Note right of QueryParser: Additional layer of validations
            QueryParser->>QuerySemanticValidator: Is_Semantically_Valid_RelRef()
            QuerySemanticValidator-->>QueryParser: Boolean b
        end
        opt is attrRef
            Note right of QueryParser: Additional layer of validations
            QueryParser->>QuerySemanticValidator: Is_Semantically_Valid_AttrRef()
            QuerySemanticValidator-->>QueryParser: Boolean b
        end
    end
    QueryParser-->>QueryExtractor:
    QueryExtractor-->>QueryOptimizer: init(clauses, vector<Group*> groups, target_syn_attributes, target_synonyms)
    QueryOptimizer-->>QueryExtractor: QueryOptimizer optimizer
    QueryExtractor-->>QueryOptimizer: optimizer.optimize()
    Note right of QueryExtractor: Applies performance optimizations on query objects <br> (refer to SD for Optimizer)
    QueryOptimizer-->>QueryExtractor: