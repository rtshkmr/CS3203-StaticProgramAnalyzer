sequenceDiagram
    autonumber
    participant AT as AutoTester
    participant SP as SourceProcessor
    participant P as Parser
    %% subsystem creates nodes and storing AST while the lines are being read
    %% Psystem contains statement stacks..
    participant PSub as PSubsystem
    participant Tkn as Tokenizer
    participant CGV as SyntaxValidator
    %% EntityFactory modifies necessary DSes (creates Entities, add entries into relationship, entity tables ...)
    participant EF as EntityFactory
    participant DE as DesignExtractor
    participant PKB as ProgramKnowledgeBase

    AT->>+SP: ProcessSourceFile(source_file)
    SP ->>+ P: Parse(source_file)

    %% initialises the necessary data structures inside PSub, these DSes (AST, RelationshipTables, EntityTables) will be accumulated
    %% Assumption: P will check correctness while building DSes %
    P ->>+ PSub: InitDataStructures()

    %% statement here refers to the source code in between two semicolons
    %% If valid_state == false in ValidateSyntax, the loop terminates
    loop has_next_stmt && valid_syntax
        P ->>+ PSub: ProcessStatement(stmt)
        PSub ->>+ Tkn: CreateTokens(stmt)
        %% a token looks like: (<symbol>, <tokenTag>) brace_open brace_close
        Tkn -->>- PSub: list<Token> tokens

        %% We ask the validator to validate the syntax for a single statement, if there's an error at any token, it should fail early
        PSub ->>+ CGV: ValidateSyntax(vector<Token>)
        CGV -->>-PSub: bool valid_syntax

        %% create Entities:  Entity here refers to the Abstraction Entity as described by the wiki/lecture 1 slides
        PSub ->>+EF:CreateEntity(vector<Token>)
        %% This method has responsibilities such as creating necessary Entity Nodes and updating the necessary tables to reflect relationships (this is where we add info about relationships b/w lines, vars...)
        %% Entity node refers to WHILE/IF/ASSIGN... ref to
        EF-->>-PSub: Entity* entity

        PSub -->>-P:
        %% todo: handle the error handling opt code here
    end
    %% at this point, all the statements have been processed, the parser is ready for deliverables to be sent to SP
    P ->>+PSub: GetDeliverables()
    PSub -->>-P: Deliverable* deliverable

    P -->>-SP:

    opt error thrown by Parser
        SP ->>SP : Terminate(msg)
    end

    SP ->>+P: GetDeliverables()
    P -->>-SP: Deliverable* deliverable

    %% todo: add in DE activities
    SP ->>+DE: ExtractDesignAbstractions()
    %% DE and SP will comms with each other bidirectionally
    %% todo: these sequences will be fleshed out in a separate sequence diagram

    SP ->>+PKB: PopulateDataStructures(deliverable)

    SP -->>- AT: PKB* pkb

    %% Transitive => Parents*, Children* Follows*, FollowedBy* Use, UsedBy, Modifies, ModifiesBy
    %% This sequence of steps ends when the source processing is done and deliverables sent to PKB %%
