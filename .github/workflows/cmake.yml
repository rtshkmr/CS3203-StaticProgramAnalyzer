name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches:
     - '**' #run for all PR

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted
    env:
      working-directory: ${{github.workspace}}/Team00/Code00

    steps:
    - uses: actions/checkout@v2
    
    - name: Check Path
      run: echo ${{env.working-directory}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{env.working-directory}} -B ${{env.working-directory}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{env.working-directory}}/build --config ${{env.BUILD_TYPE}} --target all

    - name: Unit Test
      #Running Catch2 natively on terminal
      run: ${{env.working-directory}}/build/src/unit_testing/unit_testing

    - name: Integration Test
      run: ${{env.working-directory}}/build/src/integration_testing/integration_testing
      
    - name: AutoTester 
      run: echo 'AutoTester run is not ready.'
